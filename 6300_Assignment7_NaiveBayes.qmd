---
title: "Naive Bayes' Homework"
author: "Chouly Thy"
date: "11/06/2024"
output:
  rmdformats::readthedown:
    number_sections: true
    highlight: tango
    df_print: paged
    center: true
---

```{r setup, include=FALSE}
rm(list = ls()) # clears global environment
knitr::opts_knit$set(root.dir = '/Users/choulythy/Downloads/QTM6300 Data')
```


# Context

Let’s take a look at the data located in UniversalBank.csv. Each row represents a customer at small but rapidly growing bank. The columns measure all sorts of customer characteristics, ranging from their demographic information (e.g., Age, Family) to whether they currently have various accounts open with the bank (e.g., Securities Account, CD Account). For a complete description of the fields, consult the data page on Canvas.

The bank is aggressively trying to convert customers from depositors into borrowers through its personal loan program. The column **Personal Loan** shows whether each customer responded to a direct marketing campaign related to this program. The marketing team is now trying to understand what types of customers responds to new personal loans marketing. If they can establish reasonably strong predictive power, they will deploy the model more widely across their customer base to identify promising leads and a more nuanced target market.

# Question 1

Do the following:

* Import the data as "bank"

* Any variable that is non-categorical should be nulled out. (Note, you can keep family and education since they are more categorical, but you must change them into factor variables.) You should remove the ID variable nonetheless since this should not add anything to the prediction.

* Convert ALL remaining variables to a factor variable.


```{r}
bank <- read.csv('UniversalBank.csv')

bank$ID <- NULL
bank$Age <- NULL
bank$Experience <- NULL
bank$Income <- NULL
bank$ID <- NULL
bank$ZIP.Code <- NULL
bank$CCAvg <- NULL
bank$Mortgage <- NULL

everyColumn = colnames(bank)
bank[everyColumn] = lapply(bank[everyColumn], factor)
```

# Question 2
* Set a seed of 1234 and partition a training set with 60% of the data.

```{r}
set.seed(1234)
N <- nrow(bank)
trainingSize <- round(N*0.6)
trainingCases <- sample(N, trainingSize)
training <- bank[trainingCases,]
test <- bank[-trainingCases,]
```


# Question 3
Train the Naive Bayes' model using all available categorical inputs.

```{r}
#install.packages("e1071")
library(e1071)
model <- naiveBayes(Personal.Loan ~ ., data=training)

predictions <- predict(model, test)
observations <- test$Personal.Loan

test$predictions <- predict(model, test)
#View(test)
```


# Question 4
* Create the confusion matrix to see the errors. 

```{r}
#Confusion Matrix
table(predictions,observations)
```

# Question 5
How many total predictions did the model get correct? (Not percentage)

Answer: 1813

```{r}
1786 + 27
```


# Question 6
How many total predictions did the model get incorrect? (Not percentage)

Answer: 187

```{r}
 169 + 18
```



# Question 7
Manually calculate the error rate. Show calculations using R as a calculator.

Answer:

```{r}
187 / (1813+187)
```



# Question 8
Now, Calculate the error rate using R code. Make sure your manual calculation is correct.

```{r}
#Error Rate for Model
error_rate = sum(predictions != observations)/nrow(test)
#error_rate = 1 - sum(predictions == observations)/nrow(test)   # same as above, but just different way to calculate.
error_rate
```


# Question 9 
Prior to using R to do so, manually Calculate the BENCHMARK error rate. Show calculations. What is it?

Answer: 

```{r}
(169+27)/(169+27+1786+18)
```


# Question 10 
Now use R to calculate the benchmark error rate. Make sure your calculation is the same.

```{r}
source("BabsonAnalytics.R")
error_bench = benchmarkErrorRate(training$Personal.Loan, test$Personal.Loan)
error_bench
```


# Question 11
Is your error rate for the model better than the benchmark? Is your model useful? Even though the model's error rate is lower than the benchmark, why should we be cautious?

Answer: The error rate is 0.0935 which is lower than 0.098 of the benchmark, so the model is useful. We should be caution as a lower error rate alone doesn’t guarantee the model’s practical effectiveness and consider other factors like overfitting, the relevance and quality of the training data, and how the model generalizes to real-world data.


# Question 12
Ignore the model for a moment and purely use your "bank" data frame: What is the probability that a personal has education level 3 in your data frame? (This means that they have an advanced academic degree.)

Answer: 0.3002

```{r}
prob <- sum(bank$Education == "3") / nrow(bank)

prob

```


# Question 13
Challenge Question: Ignore your model again. What is the probability a customer will have education level 3 given they responded positively to the personal loan marketing campaign.

Answer: 0.4270833

```{r}
# Calculate probability of education level 3 given a positive response
prob1 <- sum(bank$Education == "3" & bank$Personal.Loan == "1") / sum(bank$Personal.Loan == "1")

prob1
```


# Question 14
Comment on the connection between the two previous answers. What might this be telling us about what types of customers respond to personal loan advertisements?

Answer: This increase from 30% to 43% suggests that customers with higher education levels are more likely than others to respond positively to the personal loan campaign. For targeting marketing efforts, advertising might be more effective when tailored to audiences with higher education levels.

# Question 15
Run the following code given to you. 

What is this code doing? What does the output represent? 

Answer: The code calculates the odds of a customer responding positively to the personal loan marketing campaign versus not responding positively. The output of 0.1045655 means that there is a 0.10 odd of the person responding positively to the personal  loan marketing campaign. 

```{r}
odds<-sum(training$Personal.Loan == "1")/sum(training$Personal.Loan == "0")
odds
```

# Question 16
Run the following code given to you below. Note that the "&" in the code just means "and."

What is this code doing? What does the output represent?

Answer: This code is calculating the odds of a customer with education level 3 responding positively to the personal loan marketing campaign, compared to those with education level 3 who did not respond positively. the odds of a customer with education level "3" responding to the personal loan campaign positively is 0.165. 

```{r}
odds <- sum(training$Education == "3" & training$Personal.Loan == "1")/sum(training$Education == "3" & training$Personal.Loan == "0")
odds
```
